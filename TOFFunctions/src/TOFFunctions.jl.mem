        - module TOFFunctions
        - using HDF5
        - using InterpolationFunctions
        - using PyPlot
        - 
        - #using PyCall
        - #@pyimport h5py
        - 
        - export mass2timebin, timebin2mass, getMassCalibParametersFromFile, getSubSpectraCount, getSubSpectrumFromFile, getSpecMultiplicator, getSubSpectrumTimeFromFile, getAvgSpectrumFromFile, getTimeFromFile, validateHDF5Files, setMassScaleReferenceSpectrum, recalibrateMassScale
        - 
        - debuglevel = 0
        - 
        - # HELPER @everywhere functionS #
        - function mass2timebin(mass::Number,mode,parameters)
   278286   if mode == 0
        0     return parameters[1]*sqrt(mass) + parameters[2]
        -   end
        0   if mode == 1
        0     return parameters[1]/sqrt(mass) + parameters[2]
        -   end
        0   if mode == 2
        0     return parameters[1]*mass^parameters[3] + parameters[2]
        -   end
        - end
        - function mass2timebin(mass::AbstractArray,mode,parameters)
 38543832   ret = Array{Float64}(length(mass))
        0   for i = 1:length(mass)
188286880     ret[i] = mass2timebin(mass[i],mode,parameters)
        -   end
        0   return ret
        - end
        - 
        - function timebin2mass(time::Number,mode,parameters)
        -   if mode == 0
        -     return ((time-parameters[2])/parameters[1])^2
        -   end
        -   if mode == 1
        -     return (parameters[1]/(time-parameters[2]))^2
        -   end
        -   if mode == 2
        -     return ((time-parameters[2])/parameters[1])^(1/parameters[3])
        -   end
        - end
        - 
        - function timebin2mass(time::AbstractArray,mode,parameters)
        -   ret = Array{Float64}(length(time))
        -   for i = 1:length(time)
        -     ret[i] = timebin2mass(time[i],mode,parameters)
        -   end
        -   return ret
        - end
        - 
        - function getMassCalibParametersFromFile(filename)
        0     attributesFullSpectra = h5readattr(filename, "/FullSpectra")
        - 
        0     mcm = attributesFullSpectra["MassCalibMode"]
    19085     massCalibMode = mcm[1]
       80     massCalibParameters = []
        - 
        0     if (massCalibMode == 0)
        0       p1 = attributesFullSpectra["MassCalibration p1"]
        0       p2 = attributesFullSpectra["MassCalibration p2"]
   360101       massCalibParameters = [p1[1] p2[1]]
        -     end
        - 
        0     if (massCalibMode == 2)
        0       p1 = attributesFullSpectra["MassCalibration p1"]
        0       p2 = attributesFullSpectra["MassCalibration p2"]
        0       p3 = attributesFullSpectra["MassCalibration p3"]
        0       massCalibParameters = [p1[1] p2[1] p3[1]]
        -     end
        - 
      160     return massCalibMode, massCalibParameters
        - end
        - function getAvgSpectrumFromFile(filename)
        -   #println("Getting avg spectrum from $filename")
        - 
        0   attributesRoot = h5readattr(filename, "/")
        0   attributesFullSpectra = h5readattr(filename, "/FullSpectra")
        - 
     2192   H5NbrWrites = attributesRoot["NbrWrites"]
        0   H5NbrBufs = attributesRoot["NbrBufs"]
        0   H5NbrWaveForms = attributesRoot["NbrWaveforms"]
   138600   H5TofPeriod = h5readattr(filename, "/TimingData")["TofPeriod"]
        0   H5NbrSegments = attributesRoot["NbrSegments"]
        0   H5NbrBlocks = attributesRoot["NbrBlocks"]
        - 
  2257895   H5SampleInterval = attributesFullSpectra["SampleInterval"] .* 1e9
        0   H5SingleIonSignal = attributesFullSpectra["Single Ion Signal"]
        - 
    10944   H5inttime = H5NbrWaveForms.*H5TofPeriod.*H5NbrSegments.*H5NbrBlocks.*H5NbrBufs.*H5NbrWrites .* 1e-9
        - 
 16168483   avgSpectrum = h5read(filename, "FullSpectra/SumSpectrum").*H5SampleInterval./H5SingleIonSignal./H5inttime
        0   return avgSpectrum
        - end
        - 
        - function getSubSpectraCount(filename)
        -   #println("Getting sub spectrum count from $filename")
        - 
        0   fh = h5open(filename,"r")
        0   ds = fh["/FullSpectra/TofData"]
        0   l=size(ds)[3]
        0   m=size(ds)[4]
        0   close(fh)
        0   return l*m
        - end
        - 
        - function getSubSpectrumFromFile(filename, index)
        -   #allSpectra = h5read(totalPath, "/FullSpectra/TofData")
        -   #allSpectraTimes = h5read(totalPath, "/TimingData/BufTimes")
        -   #k=1:size(allSpectra)[2], m=1:size(allSpectra)[4], l=1:size(allSpectra)[3]
        -   #allSpectraTimes = h5read(filename, "/TimingData/BufTimes")
        - 
        0   fh = h5open(filename,"r")
        0   ds = fh["/FullSpectra/TofData"]
   270863   (l,m) = ind2sub((size(ds)[3],size(ds)[4]), index)
        -   #println("Getting sub spectrum ($l,$m) from $filename")
        - 
        - 
        0   subSpectrum = ds[:,1,l,m]
        0   close(fh)
        0   return subSpectrum
        - end
        - 
        - function getSpecMultiplicator(filename)
        0   attributesRoot = h5readattr(filename, "/")
        0   attributesFullSpectra = h5readattr(filename, "/FullSpectra")
        - 
        0   H5NbrWrites = attributesRoot["NbrWrites"]
        0   H5NbrBufs = attributesRoot["NbrBufs"]
        0   H5NbrWaveForms = attributesRoot["NbrWaveforms"]
        0   H5TofPeriod = h5readattr(filename, "/TimingData")["TofPeriod"]
        0   H5NbrSegments = attributesRoot["NbrSegments"]
        0   H5NbrBlocks = attributesRoot["NbrBlocks"]
        - 
   243922   H5SampleInterval = attributesFullSpectra["SampleInterval"] .* 1e9
        0   H5SingleIonSignal = attributesFullSpectra["Single Ion Signal"]
        - 
     6544   H5inttime = H5NbrWaveForms.*H5TofPeriod.*H5NbrSegments.*H5NbrBlocks .* 1e-9
        - 
  2958071   return (H5SampleInterval./H5SingleIonSignal./H5inttime)[1]
        - end
        - 
        - function getSubSpectrumTimeFromFile(filename, index)
        0   fh = h5open(filename,"r")
        0   allSpectraTimes = h5read(filename, "/TimingData/BufTimes")
        0   ds = fh["/TimingData/BufTimes"]
    61440   (l,m) = ind2sub((size(ds)[1],size(ds)[2]), index)
        -   #println("Getting sub spectrum Time ($l,$m) from $filename")
        0   time = ds[l,m]
        0   close(fh)
        0   return time
        - end
        - 
        - 
        - function getTimeFromFile(filename)
        - 
        -   # TODO: Replace with Aquisition log Start Time (Windows Timestamp)
        -   #=
        -   f = h5py.File(filename, "r")
        -   aqLog = f["AcquisitionLog"]["Log"]
        -   logEntryDescription = aqLog[1][3]
        -   time_windowsTimestamp = aqLog[1][1][1]
        -   println("Win Timestamp detected: $time_windowsTimestamp")
        -   t=DateTime()
        -   if logEntryDescription =="Acquisition started" # "Acquisition started"
        -     tUnix = time_windowsTimestamp/(10.0*1000.0*1000.0)-11644473600.0
        -     println("tUnix has size $(size(tUnix))")
        -     t = Dates.unix2datetime(tUnix)#[1]
        -   else
        -     println("Error: could not find start time in $filename/AcquisitionLog/Log\n...trying to use timestamp string from attributes")
        -     =#
        0     attributesRoot = h5readattr(filename, "/")
        0     time_s = attributesRoot["HDF5 File Creation Time"]
        0     acq_card = attributesRoot["DAQ Hardware"]
     4864     println(acq_card)
        0     if (acq_card == "Cronologic HPTDC8-PCI")
        0       t = DateTime(time_s, "m/d/y H:M:S") # STOF
        -     else
 14394534       t = DateTime(time_s, "d/m/y H:M:S") # PTR3
        -     end
        - 
        -   #end
        -   #f[:close]()
        0   return t
        - end
        - 
        - function validateHDF5Files(filepath, files)
        0   if debuglevel > 0   println("$nFiles files found, checking if valid.") end
       80   validFiles = []
       80   badFiles = []
        0   nFiles = size(files,1)
        - 
        0   for j=1:nFiles
      576     totalPath = joinpath(filepath, files[j])
        0     if debuglevel > 1 print("Checking $totalPath ... ") end
        0     if (!ishdf5(totalPath))
        0       if debuglevel > 0   println("Bad File: $totalPath") end
        0       push!(badFiles,files[j])
        -     else
        0       fh = h5open(totalPath,"r")
        0       ds = fh["TimingData/BufTimes"]
        0       if (length(ds) > 0)
    64173         if (ds[end,end][end,end] > 1e-99) # Last timestamp seems to be very small on corrupted files
        0           if debuglevel > 1 println("OK") end
        0           push!(validFiles,files[j])
        -         end
        -       else
        0         if debuglevel > 0   println("Bad File: $totalPath") end
        0         push!(badFiles,files[j])
        -       end
        0       close(fh)
        -     end
        -   end
        0   if debuglevel > 0   println("$(length(files)-length(validFiles)) files removed.") end
        0   return validFiles
        - end
        - 
        - 
        - 
        - ############# Mass recalibration stuff ##############################
        - 
        - m_regionsToMatch = []
        - m_regionMaxMatchCoeffs = []
        - m_calibRegions = []
        - m_searchWidth = 0
        - m_referenceMassScaleMode = 0
        - m_referenceMassScaleParameters = []
        - m_referenceSpectrum = []
        - 
        - #plot stuff
        - crIndStart = 0
        - crIndEnd = 0
        - crMassIndicesOriginal = []
        - crOriginalMasses = []
        - m_plotControlMass = false
        - 
        - function setMassScaleReferenceSpectrum(referenceSpectrum, calibRegions, searchWidth, referenceMassScaleMode, referenceMassScaleParameters; plotControlMass=false, testRangeStart=0, testRangeEnd=0)
   358732   println("Setting mass scale reference spectrum.")
       80   global m_regionsToMatch = []
       80   global m_regionMaxMatchCoeffs = []
        0   global m_referenceSpectrum = referenceSpectrum
        0   global m_calibRegions = calibRegions
  5088309   println("calibRegions: $m_calibRegions")
        - 
       16   global m_searchWidth = searchWidth
        0   global m_referenceMassScaleMode = referenceMassScaleMode
        0   global m_referenceMassScaleParameters = referenceMassScaleParameters
        - 
        0   global m_plotControlMass = plotControlMass
        - 
       64   for region in m_calibRegions
       96     referenceIndexStart::Int64 = round(mass2timebin(region -  searchWidth, referenceMassScaleMode,referenceMassScaleParameters))
       96     referenceIndexEnd::Int64 = round(mass2timebin(region +  searchWidth, referenceMassScaleMode,referenceMassScaleParameters))
    28000     regionToMatch = m_referenceSpectrum[referenceIndexStart:referenceIndexEnd]
        - 
       48     push!(m_regionsToMatch,  regionToMatch)
        - 
        -     # calc self correlation coeff max for later normalization of correlation quality
  7419413     correlation = (xcorr(regionToMatch,regionToMatch))
   198280     maximumCorrelation = findmax(correlation)
       32     intensity = maximumCorrelation[1]
       48     push!(m_regionMaxMatchCoeffs,intensity)
        - 
        -   end
        0   if m_plotControlMass
        0     global crIndStart = round(mass2timebin(testRangeStart,referenceMassScaleMode,referenceMassScaleParameters))
        0     global crIndEnd = round(mass2timebin(testRangeEnd,referenceMassScaleMode,referenceMassScaleParameters))
        0     global crMassIndicesOriginal = collect(crIndStart:1:crIndEnd)
        0     global crOriginalMasses = zeros(size(crMassIndicesOriginal))
        0     for i = 1 : length(crOriginalMasses)
        0       crOriginalMasses[i] = timebin2mass(crMassIndicesOriginal[i],referenceMassScaleMode,referenceMassScaleParameters)
        -     end
        -   end
        - end
        - 
        - function recalibrateMassScale(spectrum, referenceSpectrum, calibRegions, searchWidth, massCalibMode, massCalibParameters)
        - #println("calibRegions: $m_calibRegions")
 21308057 print(".")
        0 success = true
        - 
   457632 A = SharedArray{Float64}(length(m_calibRegions),2)
        0 A[:,2] = 1
   395648 B = SharedArray{Float64}(length(m_calibRegions),1)
        - 
     3424 timebinshifts = zeros(length(m_calibRegions))
     1920 intensities = zeros(length(m_calibRegions))
        - 
        - #@sync @parallel
     1920 for regionindex=1:length(m_calibRegions)
        0     region = m_calibRegions[regionindex]
        - 
        - 
     1920     indexStart::Int64 = round(mass2timebin(region - m_searchWidth, m_referenceMassScaleMode,m_referenceMassScaleParameters))
     1920     indexEnd::Int64 = round(mass2timebin(region + m_searchWidth, m_referenceMassScaleMode,m_referenceMassScaleParameters))
        0     regionToSearch = spectrum[indexStart:indexEnd]
  5814720     correlation = (xcorr(convert(Array{Float64,1}, regionToSearch),convert(Array{Float64,1}, m_regionsToMatch[regionindex])))
     1280     maximumCorrelation = findmax(correlation)
        0     if debuglevel > 3   println("maximumCorrelation at $(maximumCorrelation)") end
        0     shift = 0;
        0     intensity = 0;
     1280     if (maximumCorrelation[2]>1 && maximumCorrelation[2]<length(correlation))
     1280       inta=correlation[maximumCorrelation[2]-1]
      640       intb=maximumCorrelation[1]
     1280       intc=correlation[maximumCorrelation[2]+1]
      640       minAC = min(inta, intc)
    25962       shiftDeltaInterpolated = (intc - inta)/(inta + intb + intc - 3*minAC) # Tricky: -0.5 if a=b, +0.5 if b=c, +0.0 if a=c, interpol in between
        -       #plot(correlation[maximumCorrelation[2]-10:maximumCorrelation[2]+10])
        0       if debuglevel > 3   println("Interpolated Shift: $shiftDeltaInterpolated") end
     3520       shift = shiftDeltaInterpolated + maximumCorrelation[2] - (length(regionToSearch) + length(m_regionsToMatch[regionindex]))/2
     1280       intensity = maximumCorrelation[1]/m_regionMaxMatchCoeffs[regionindex]
        0       timebinshifts[regionindex] = shift
        0       intensities[regionindex] = intensity
        -     else
        0       timebinshifts[regionindex] = 0
        0       intensities[regionindex] = 0
        - 
        -     end
        0     if debuglevel > 2   println("Mass $region found shifted by $shift timebins with correlation coeff $(intensity)") end
        0     if (intensity < 0.05)
        0       success = false
        0       println("Could not correctly match m$region")
        -     end
   359174     A[regionindex,1] = sqrt(region)
     1856     B[regionindex] = mass2timebin(region, m_referenceMassScaleMode,m_referenceMassScaleParameters)  + 1.0 + shift
        -   end
        - 
        0   if success
        0     if debuglevel > 3   println("A: $A") end
        0     if debuglevel > 3   println("B: $B") end
     8000     newParams = \(A,B)
        0     if debuglevel > 3   println("New parameters: $(newParams)") end
        -   else
        0     newParams = m_referenceMassScaleParameters
        0     if debuglevel > 3   println("Using WRONG calib parameters.") end
        -   end
        - 
        0   if (m_plotControlMass == true)
        0     crNewInterpolatedValues = zeros(crOriginalMasses)
        0     indexesExact = mass2timebin(crOriginalMasses, m_referenceMassScaleMode, newParams)
        0     crNewInterpolatedValues = interpolate(indexesExact,spectrum)
        0     plot(crOriginalMasses, crNewInterpolatedValues/maximum(crNewInterpolatedValues),".-")
        -   end
     1104 return newParams, success, timebinshifts, intensities
        - end
        - 
        - end
        - 
